AORB_1:11:void_bubbleSort(int):n - 1 => n * 1
AORB_2:11:void_bubbleSort(int):n - 1 => n / 1
AORB_3:11:void_bubbleSort(int):n - 1 => n % 1
AORB_4:11:void_bubbleSort(int):n - 1 => n + 1
AORB_5:13:void_bubbleSort(int):n - i => n * i
AORB_6:13:void_bubbleSort(int):n - i => n / i
AORB_7:13:void_bubbleSort(int):n - i => n % i
AORB_8:13:void_bubbleSort(int):n - i => n + i
AORB_9:13:void_bubbleSort(int):n - i - 1 => (n - i) * 1
AORB_10:13:void_bubbleSort(int):n - i - 1 => (n - i) / 1
AORB_11:13:void_bubbleSort(int):n - i - 1 => (n - i) % 1
AORB_12:13:void_bubbleSort(int):n - i - 1 => n - i + 1
AORB_13:14:void_bubbleSort(int):j + 1 => j * 1
AORB_14:14:void_bubbleSort(int):j + 1 => j / 1
AORB_15:14:void_bubbleSort(int):j + 1 => j % 1
AORB_16:14:void_bubbleSort(int):j + 1 => j - 1
AORB_17:16:void_bubbleSort(int):j + 1 => j * 1
AORB_18:16:void_bubbleSort(int):j + 1 => j / 1
AORB_19:16:void_bubbleSort(int):j + 1 => j % 1
AORB_20:16:void_bubbleSort(int):j + 1 => j - 1
AORB_21:17:void_bubbleSort(int):j + 1 => j * 1
AORB_22:17:void_bubbleSort(int):j + 1 => j / 1
AORB_23:17:void_bubbleSort(int):j + 1 => j % 1
AORB_24:17:void_bubbleSort(int):j + 1 => j - 1
AORS_1:11:void_bubbleSort(int):i++ => i--
AORS_2:13:void_bubbleSort(int):j++ => j--
AOIU_1:9:void_bubbleSort(int):arr.length => -arr.length
AOIU_2:11:void_bubbleSort(int):i => -i
AOIU_3:11:void_bubbleSort(int):n => -n
AOIU_4:13:void_bubbleSort(int):j => -j
AOIU_5:13:void_bubbleSort(int):n => -n
AOIU_6:14:void_bubbleSort(int):j => -j
AOIU_7:14:void_bubbleSort(int):j => -j
AOIU_8:15:void_bubbleSort(int):j => -j
AOIU_9:16:void_bubbleSort(int):j => -j
AOIU_10:17:void_bubbleSort(int):temp => -temp
AOIS_1:9:void_bubbleSort(int):arr.length => arr.length++
AOIS_2:9:void_bubbleSort(int):arr.length => arr.length--
AOIS_3:11:void_bubbleSort(int):i => ++i
AOIS_4:11:void_bubbleSort(int):i => --i
AOIS_5:11:void_bubbleSort(int):i => i++
AOIS_6:11:void_bubbleSort(int):i => i--
AOIS_7:11:void_bubbleSort(int):n => ++n
AOIS_8:11:void_bubbleSort(int):n => --n
AOIS_9:11:void_bubbleSort(int):n => n++
AOIS_10:11:void_bubbleSort(int):n => n--
AOIS_11:13:void_bubbleSort(int):j => ++j
AOIS_12:13:void_bubbleSort(int):j => --j
AOIS_13:13:void_bubbleSort(int):j => j++
AOIS_14:13:void_bubbleSort(int):j => j--
AOIS_15:13:void_bubbleSort(int):n => ++n
AOIS_16:13:void_bubbleSort(int):n => --n
AOIS_17:13:void_bubbleSort(int):n => n++
AOIS_18:13:void_bubbleSort(int):n => n--
AOIS_19:13:void_bubbleSort(int):i => ++i
AOIS_20:13:void_bubbleSort(int):i => --i
AOIS_21:13:void_bubbleSort(int):i => i++
AOIS_22:13:void_bubbleSort(int):i => i--
AOIS_23:14:void_bubbleSort(int):j => ++j
AOIS_24:14:void_bubbleSort(int):j => --j
AOIS_25:14:void_bubbleSort(int):j => j++
AOIS_26:14:void_bubbleSort(int):j => j--
AOIS_27:14:void_bubbleSort(int):j => ++j
AOIS_28:14:void_bubbleSort(int):j => --j
AOIS_29:14:void_bubbleSort(int):j => j++
AOIS_30:14:void_bubbleSort(int):j => j--
AOIS_31:15:void_bubbleSort(int):j => j++
AOIS_32:15:void_bubbleSort(int):j => j--
AOIS_33:16:void_bubbleSort(int):j => ++j
AOIS_34:16:void_bubbleSort(int):j => --j
AOIS_35:16:void_bubbleSort(int):j => j++
AOIS_36:16:void_bubbleSort(int):j => j--
AOIS_37:17:void_bubbleSort(int):temp => ++temp
AOIS_38:17:void_bubbleSort(int):temp => --temp
AOIS_39:17:void_bubbleSort(int):temp => temp++
AOIS_40:17:void_bubbleSort(int):temp => temp--
ROR_1:11:void_bubbleSort(int): i < n - 1  =>   i > n - 1
ROR_2:11:void_bubbleSort(int): i < n - 1  =>   i >= n - 1
ROR_3:11:void_bubbleSort(int): i < n - 1  =>   i <= n - 1
ROR_4:11:void_bubbleSort(int): i < n - 1  =>   i == n - 1
ROR_5:11:void_bubbleSort(int): i < n - 1  =>   i != n - 1
ROR_6:11:void_bubbleSort(int): i < n - 1  =>   true
ROR_7:11:void_bubbleSort(int): i < n - 1  =>   false
ROR_8:13:void_bubbleSort(int): j < n - i - 1  =>   j > n - i - 1
ROR_9:13:void_bubbleSort(int): j < n - i - 1  =>   j >= n - i - 1
ROR_10:13:void_bubbleSort(int): j < n - i - 1  =>   j <= n - i - 1
ROR_11:13:void_bubbleSort(int): j < n - i - 1  =>   j == n - i - 1
ROR_12:13:void_bubbleSort(int): j < n - i - 1  =>   j != n - i - 1
ROR_13:13:void_bubbleSort(int): j < n - i - 1  =>   true
ROR_14:13:void_bubbleSort(int): j < n - i - 1  =>   false
ROR_15:14:void_bubbleSort(int): arr[j] > arr[j + 1]  =>   arr[j] >= arr[j + 1]
ROR_16:14:void_bubbleSort(int): arr[j] > arr[j + 1]  =>   arr[j] < arr[j + 1]
ROR_17:14:void_bubbleSort(int): arr[j] > arr[j + 1]  =>   arr[j] <= arr[j + 1]
ROR_18:14:void_bubbleSort(int): arr[j] > arr[j + 1]  =>   arr[j] == arr[j + 1]
ROR_19:14:void_bubbleSort(int): arr[j] > arr[j + 1]  =>   arr[j] != arr[j + 1]
ROR_20:14:void_bubbleSort(int): arr[j] > arr[j + 1]  =>   true
ROR_21:14:void_bubbleSort(int): arr[j] > arr[j + 1]  =>   false
COD_1:21:void_bubbleSort(int):!swapped => swapped
COI_1:11:void_bubbleSort(int): i < n - 1  =>  !(i < n - 1)
COI_2:12:void_bubbleSort(int): swapped  =>  !swapped
COI_3:13:void_bubbleSort(int): j < n - i - 1  =>  !(j < n - i - 1)
COI_4:14:void_bubbleSort(int): arr[j] > arr[j + 1]  =>  !(arr[j] > arr[j + 1])
COI_5:18:void_bubbleSort(int): swapped  =>  !swapped
LOI_1:9:void_bubbleSort(int):arr.length => ~arr.length
LOI_2:11:void_bubbleSort(int):i => ~i
LOI_3:11:void_bubbleSort(int):n => ~n
LOI_4:11:void_bubbleSort(int):i => ~i
LOI_5:13:void_bubbleSort(int):j => ~j
LOI_6:13:void_bubbleSort(int):n => ~n
LOI_7:13:void_bubbleSort(int):i => ~i
LOI_8:13:void_bubbleSort(int):j => ~j
LOI_9:14:void_bubbleSort(int):j => ~j
LOI_10:14:void_bubbleSort(int):j => ~j
LOI_11:15:void_bubbleSort(int):j => ~j
LOI_12:16:void_bubbleSort(int):j => ~j
LOI_13:16:void_bubbleSort(int):j => ~j
LOI_14:17:void_bubbleSort(int):j => ~j
LOI_15:17:void_bubbleSort(int):temp => ~temp
SDL_1:11:void_bubbleSort(int): int n = arr.length; boolean swapped; for (int i = 0; i < n - 1; i++) {     swapped = false;     for (int j = 0; j < n - i - 1; j++) {         if (arr[j] > arr[j + 1]) {             int temp = arr[j];             arr[j] = arr[j + 1];             arr[j + 1] = temp;             swapped = true;         }     }     if (!swapped) {         break;     } }  =>   int n = arr.length; boolean swapped;
SDL_2:23:void_bubbleSort(int): swapped = false; for (int j = 0; j < n - i - 1; j++) {     if (arr[j] > arr[j + 1]) {         int temp = arr[j];         arr[j] = arr[j + 1];         arr[j + 1] = temp;         swapped = true;     } } if (!swapped) {     break; }  =>   for (int j = 0; j < n - i - 1; j++) {     if (arr[j] > arr[j + 1]) {         int temp = arr[j];         arr[j] = arr[j + 1];         arr[j + 1] = temp;         swapped = true;     } } if (!swapped) {     break; }
SDL_3:16:void_bubbleSort(int): swapped = false; for (int j = 0; j < n - i - 1; j++) {     if (arr[j] > arr[j + 1]) {         int temp = arr[j];         arr[j] = arr[j + 1];         arr[j + 1] = temp;         swapped = true;     } } if (!swapped) {     break; }  =>   swapped = false; if (!swapped) {     break; }
SDL_4:21:void_bubbleSort(int): swapped = false; for (int j = 0; j < n - i - 1; j++) {     if (arr[j] > arr[j + 1]) {         int temp = arr[j];         arr[j] = arr[j + 1];         arr[j + 1] = temp;         swapped = true;     } } if (!swapped) {     break; }  =>   swapped = false; for (int j = 0; j < n - i - 1; j++) {     if (arr[j] > arr[j + 1]) {         int temp = arr[j];         arr[j] = arr[j + 1];         arr[j + 1] = temp;         swapped = true;     } }
SDL_5:25:void_bubbleSort(int): for (int i = 0; i < n - 1; i++) {     swapped = false;     for (int j = 0; j < n - i - 1; j++) {         if (arr[j] > arr[j + 1]) {             int temp = arr[j];             arr[j] = arr[j + 1];             arr[j + 1] = temp;             swapped = true;         }     }     if (!swapped) {         break;     } }  =>   for (int i = 0;; i++) {     swapped = false;     for (int j = 0; j < n - i - 1; j++) {         if (arr[j] > arr[j + 1]) {             int temp = arr[j];             arr[j] = arr[j + 1];             arr[j + 1] = temp;             swapped = true;         }     }     if (!swapped) {         break;     } }
SDL_6:25:void_bubbleSort(int): for (int i = 0; i < n - 1; i++) {     swapped = false;     for (int j = 0; j < n - i - 1; j++) {         if (arr[j] > arr[j + 1]) {             int temp = arr[j];             arr[j] = arr[j + 1];             arr[j + 1] = temp;             swapped = true;         }     }     if (!swapped) {         break;     } }  =>   for (int i = 0; i < n - 1;) {     swapped = false;     for (int j = 0; j < n - i - 1; j++) {         if (arr[j] > arr[j + 1]) {             int temp = arr[j];             arr[j] = arr[j + 1];             arr[j + 1] = temp;             swapped = true;         }     }     if (!swapped) {         break;     } }
SDL_7:14:void_bubbleSort(int): if (arr[j] > arr[j + 1]) {     int temp = arr[j];     arr[j] = arr[j + 1];     arr[j + 1] = temp;     swapped = true; }  =>  
SDL_8:21:void_bubbleSort(int): for (int j = 0; j < n - i - 1; j++) {     if (arr[j] > arr[j + 1]) {         int temp = arr[j];         arr[j] = arr[j + 1];         arr[j + 1] = temp;         swapped = true;     } }  =>   for (int j = 0;; j++) {     if (arr[j] > arr[j + 1]) {         int temp = arr[j];         arr[j] = arr[j + 1];         arr[j + 1] = temp;         swapped = true;     } }
SDL_9:21:void_bubbleSort(int): for (int j = 0; j < n - i - 1; j++) {     if (arr[j] > arr[j + 1]) {         int temp = arr[j];         arr[j] = arr[j + 1];         arr[j + 1] = temp;         swapped = true;     } }  =>   for (int j = 0; j < n - i - 1;) {     if (arr[j] > arr[j + 1]) {         int temp = arr[j];         arr[j] = arr[j + 1];         arr[j + 1] = temp;         swapped = true;     } }
SDL_10:18:void_bubbleSort(int): int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; swapped = true;  =>   int temp = arr[j]; arr[j + 1] = temp; swapped = true;
SDL_11:18:void_bubbleSort(int): int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; swapped = true;  =>   int temp = arr[j]; arr[j] = arr[j + 1]; swapped = true;
SDL_12:18:void_bubbleSort(int): int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; swapped = true;  =>   int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp;
SDL_13:20:void_bubbleSort(int): if (arr[j] > arr[j + 1]) {     int temp = arr[j];     arr[j] = arr[j + 1];     arr[j + 1] = temp;     swapped = true; }  =>   if (true) {     int temp = arr[j];     arr[j] = arr[j + 1];     arr[j + 1] = temp;     swapped = true; }
SDL_14:22:void_bubbleSort(int): break;  =>  
SDL_15:24:void_bubbleSort(int): if (!swapped) {     break; }  =>   if (true) {     break; }
VDL_1:11:void_bubbleSort(int):n - 1 => 1
VDL_2:11:void_bubbleSort(int):i < n - 1 => n - 1
VDL_3:11:void_bubbleSort(int):i++ =>  
VDL_4:13:void_bubbleSort(int):n - i => i
VDL_5:13:void_bubbleSort(int):n - i => n
VDL_6:13:void_bubbleSort(int):j < n - i - 1 => n - i - 1
VDL_7:13:void_bubbleSort(int):j++ =>  
VDL_8:14:void_bubbleSort(int):j + 1 => 1
VDL_9:14:void_bubbleSort(int):arr[j] > arr[j + 1] => arr[j + 1]
VDL_10:14:void_bubbleSort(int):arr[j] > arr[j + 1] => arr[j]
VDL_11:16:void_bubbleSort(int):j + 1 => 1
VDL_12:17:void_bubbleSort(int):j + 1 => 1
VDL_13:21:void_bubbleSort(int):!swapped =>  
ODL_1:11:void_bubbleSort(int):n - 1 => n
ODL_2:11:void_bubbleSort(int):n - 1 => 1
ODL_3:11:void_bubbleSort(int):i < n - 1 => i
ODL_4:11:void_bubbleSort(int):i < n - 1 => n - 1
ODL_5:11:void_bubbleSort(int):i++ => i
ODL_6:13:void_bubbleSort(int):n - i => n
ODL_7:13:void_bubbleSort(int):n - i => i
ODL_8:13:void_bubbleSort(int):n - i - 1 => n - i
ODL_9:13:void_bubbleSort(int):n - i - 1 => 1
ODL_10:13:void_bubbleSort(int):j < n - i - 1 => j
ODL_11:13:void_bubbleSort(int):j < n - i - 1 => n - i - 1
ODL_12:13:void_bubbleSort(int):j++ => j
ODL_13:14:void_bubbleSort(int):j + 1 => j
ODL_14:14:void_bubbleSort(int):j + 1 => 1
ODL_15:14:void_bubbleSort(int):arr[j] > arr[j + 1] => arr[j]
ODL_16:14:void_bubbleSort(int):arr[j] > arr[j + 1] => arr[j + 1]
ODL_17:16:void_bubbleSort(int):j + 1 => j
ODL_18:16:void_bubbleSort(int):j + 1 => 1
ODL_19:17:void_bubbleSort(int):j + 1 => j
ODL_20:17:void_bubbleSort(int):j + 1 => 1
ODL_21:21:void_bubbleSort(int):!swapped => swapped
CDL_1:11:void_bubbleSort(int):n - 1 => n
CDL_2:13:void_bubbleSort(int):n - i - 1 => n - i
CDL_3:14:void_bubbleSort(int):j + 1 => j
CDL_4:16:void_bubbleSort(int):j + 1 => j
CDL_5:17:void_bubbleSort(int):j + 1 => j
