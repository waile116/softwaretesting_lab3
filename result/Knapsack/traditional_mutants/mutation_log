AORB_1:10:int_knapsack(int,int,int):n + 1 => n * 1
AORB_2:10:int_knapsack(int,int,int):n + 1 => n / 1
AORB_3:10:int_knapsack(int,int,int):n + 1 => n % 1
AORB_4:10:int_knapsack(int,int,int):n + 1 => n - 1
AORB_5:10:int_knapsack(int,int,int):capacity + 1 => capacity * 1
AORB_6:10:int_knapsack(int,int,int):capacity + 1 => capacity / 1
AORB_7:10:int_knapsack(int,int,int):capacity + 1 => capacity % 1
AORB_8:10:int_knapsack(int,int,int):capacity + 1 => capacity - 1
AORB_9:16:int_knapsack(int,int,int):i - 1 => i * 1
AORB_10:16:int_knapsack(int,int,int):i - 1 => i / 1
AORB_11:16:int_knapsack(int,int,int):i - 1 => i % 1
AORB_12:16:int_knapsack(int,int,int):i - 1 => i + 1
AORB_13:17:int_knapsack(int,int,int):i - 1 => i * 1
AORB_14:17:int_knapsack(int,int,int):i - 1 => i / 1
AORB_15:17:int_knapsack(int,int,int):i - 1 => i % 1
AORB_16:17:int_knapsack(int,int,int):i - 1 => i + 1
AORB_17:17:int_knapsack(int,int,int):i - 1 => i * 1
AORB_18:17:int_knapsack(int,int,int):i - 1 => i / 1
AORB_19:17:int_knapsack(int,int,int):i - 1 => i % 1
AORB_20:17:int_knapsack(int,int,int):i - 1 => i + 1
AORB_21:17:int_knapsack(int,int,int):i - 1 => i * 1
AORB_22:17:int_knapsack(int,int,int):i - 1 => i / 1
AORB_23:17:int_knapsack(int,int,int):i - 1 => i % 1
AORB_24:17:int_knapsack(int,int,int):i - 1 => i + 1
AORB_25:17:int_knapsack(int,int,int):w - weights[i - 1] => w * weights[i - 1]
AORB_26:17:int_knapsack(int,int,int):w - weights[i - 1] => w / weights[i - 1]
AORB_27:17:int_knapsack(int,int,int):w - weights[i - 1] => w % weights[i - 1]
AORB_28:17:int_knapsack(int,int,int):w - weights[i - 1] => w + weights[i - 1]
AORB_29:17:int_knapsack(int,int,int):values[i - 1] + dp[i - 1][w - weights[i - 1]] => values[i - 1] * dp[i - 1][w - weights[i - 1]]
AORB_30:17:int_knapsack(int,int,int):values[i - 1] + dp[i - 1][w - weights[i - 1]] => values[i - 1] / dp[i - 1][w - weights[i - 1]]
AORB_31:17:int_knapsack(int,int,int):values[i - 1] + dp[i - 1][w - weights[i - 1]] => values[i - 1] % dp[i - 1][w - weights[i - 1]]
AORB_32:17:int_knapsack(int,int,int):values[i - 1] + dp[i - 1][w - weights[i - 1]] => values[i - 1] - dp[i - 1][w - weights[i - 1]]
AORB_33:17:int_knapsack(int,int,int):i - 1 => i * 1
AORB_34:17:int_knapsack(int,int,int):i - 1 => i / 1
AORB_35:17:int_knapsack(int,int,int):i - 1 => i % 1
AORB_36:17:int_knapsack(int,int,int):i - 1 => i + 1
AORB_37:19:int_knapsack(int,int,int):i - 1 => i * 1
AORB_38:19:int_knapsack(int,int,int):i - 1 => i / 1
AORB_39:19:int_knapsack(int,int,int):i - 1 => i % 1
AORB_40:19:int_knapsack(int,int,int):i - 1 => i + 1
AORS_1:11:int_knapsack(int,int,int):i++ => i--
AORS_2:12:int_knapsack(int,int,int):w++ => w--
AOIU_1:9:int_knapsack(int,int,int):weights.length => -weights.length
AOIU_2:10:int_knapsack(int,int,int):n => -n
AOIU_3:10:int_knapsack(int,int,int):capacity => -capacity
AOIU_4:11:int_knapsack(int,int,int):i => -i
AOIU_5:11:int_knapsack(int,int,int):n => -n
AOIU_6:12:int_knapsack(int,int,int):w => -w
AOIU_7:12:int_knapsack(int,int,int):capacity => -capacity
AOIU_8:16:int_knapsack(int,int,int):i => -i
AOIU_9:16:int_knapsack(int,int,int):w => -w
AOIU_10:17:int_knapsack(int,int,int):i => -i
AOIU_11:17:int_knapsack(int,int,int):i => -i
AOIU_12:17:int_knapsack(int,int,int):w => -w
AOIU_13:19:int_knapsack(int,int,int):i => -i
AOIU_14:19:int_knapsack(int,int,int):w => -w
AOIU_15:24:int_knapsack(int,int,int):n => -n
AOIU_16:24:int_knapsack(int,int,int):capacity => -capacity
AOIS_1:9:int_knapsack(int,int,int):weights.length => weights.length++
AOIS_2:9:int_knapsack(int,int,int):weights.length => weights.length--
AOIS_3:10:int_knapsack(int,int,int):n => ++n
AOIS_4:10:int_knapsack(int,int,int):n => --n
AOIS_5:10:int_knapsack(int,int,int):n => n++
AOIS_6:10:int_knapsack(int,int,int):n => n--
AOIS_7:10:int_knapsack(int,int,int):capacity => ++capacity
AOIS_8:10:int_knapsack(int,int,int):capacity => --capacity
AOIS_9:10:int_knapsack(int,int,int):capacity => capacity++
AOIS_10:10:int_knapsack(int,int,int):capacity => capacity--
AOIS_11:11:int_knapsack(int,int,int):i => ++i
AOIS_12:11:int_knapsack(int,int,int):i => --i
AOIS_13:11:int_knapsack(int,int,int):i => i++
AOIS_14:11:int_knapsack(int,int,int):i => i--
AOIS_15:11:int_knapsack(int,int,int):n => ++n
AOIS_16:11:int_knapsack(int,int,int):n => --n
AOIS_17:11:int_knapsack(int,int,int):n => n++
AOIS_18:11:int_knapsack(int,int,int):n => n--
AOIS_19:12:int_knapsack(int,int,int):w => ++w
AOIS_20:12:int_knapsack(int,int,int):w => --w
AOIS_21:12:int_knapsack(int,int,int):w => w++
AOIS_22:12:int_knapsack(int,int,int):w => w--
AOIS_23:12:int_knapsack(int,int,int):capacity => ++capacity
AOIS_24:12:int_knapsack(int,int,int):capacity => --capacity
AOIS_25:12:int_knapsack(int,int,int):capacity => capacity++
AOIS_26:12:int_knapsack(int,int,int):capacity => capacity--
AOIS_27:13:int_knapsack(int,int,int):i => ++i
AOIS_28:13:int_knapsack(int,int,int):i => --i
AOIS_29:13:int_knapsack(int,int,int):i => i++
AOIS_30:13:int_knapsack(int,int,int):i => i--
AOIS_31:13:int_knapsack(int,int,int):w => ++w
AOIS_32:13:int_knapsack(int,int,int):w => --w
AOIS_33:13:int_knapsack(int,int,int):w => w++
AOIS_34:13:int_knapsack(int,int,int):w => w--
AOIS_35:16:int_knapsack(int,int,int):i => ++i
AOIS_36:16:int_knapsack(int,int,int):i => --i
AOIS_37:16:int_knapsack(int,int,int):i => i++
AOIS_38:16:int_knapsack(int,int,int):i => i--
AOIS_39:16:int_knapsack(int,int,int):w => w++
AOIS_40:16:int_knapsack(int,int,int):w => w--
AOIS_41:17:int_knapsack(int,int,int):i => ++i
AOIS_42:17:int_knapsack(int,int,int):i => --i
AOIS_43:17:int_knapsack(int,int,int):i => i++
AOIS_44:17:int_knapsack(int,int,int):i => i--
AOIS_45:17:int_knapsack(int,int,int):i => ++i
AOIS_46:17:int_knapsack(int,int,int):i => --i
AOIS_47:17:int_knapsack(int,int,int):i => i++
AOIS_48:17:int_knapsack(int,int,int):i => i--
AOIS_49:17:int_knapsack(int,int,int):w => ++w
AOIS_50:17:int_knapsack(int,int,int):w => --w
AOIS_51:17:int_knapsack(int,int,int):w => w++
AOIS_52:17:int_knapsack(int,int,int):w => w--
AOIS_53:17:int_knapsack(int,int,int):i => ++i
AOIS_54:17:int_knapsack(int,int,int):i => --i
AOIS_55:17:int_knapsack(int,int,int):i => i++
AOIS_56:17:int_knapsack(int,int,int):i => i--
AOIS_57:17:int_knapsack(int,int,int):i => ++i
AOIS_58:17:int_knapsack(int,int,int):i => --i
AOIS_59:17:int_knapsack(int,int,int):i => i++
AOIS_60:17:int_knapsack(int,int,int):i => i--
AOIS_61:17:int_knapsack(int,int,int):w => w++
AOIS_62:17:int_knapsack(int,int,int):w => w--
AOIS_63:19:int_knapsack(int,int,int):i => ++i
AOIS_64:19:int_knapsack(int,int,int):i => --i
AOIS_65:19:int_knapsack(int,int,int):i => i++
AOIS_66:19:int_knapsack(int,int,int):i => i--
AOIS_67:19:int_knapsack(int,int,int):w => w++
AOIS_68:19:int_knapsack(int,int,int):w => w--
AOIS_69:24:int_knapsack(int,int,int):n => n++
AOIS_70:24:int_knapsack(int,int,int):n => n--
AOIS_71:24:int_knapsack(int,int,int):capacity => capacity++
AOIS_72:24:int_knapsack(int,int,int):capacity => capacity--
ROR_1:11:int_knapsack(int,int,int): i <= n  =>   i > n
ROR_2:11:int_knapsack(int,int,int): i <= n  =>   i >= n
ROR_3:11:int_knapsack(int,int,int): i <= n  =>   i < n
ROR_4:11:int_knapsack(int,int,int): i <= n  =>   i == n
ROR_5:11:int_knapsack(int,int,int): i <= n  =>   i != n
ROR_6:11:int_knapsack(int,int,int): i <= n  =>   true
ROR_7:11:int_knapsack(int,int,int): i <= n  =>   false
ROR_8:12:int_knapsack(int,int,int): w <= capacity  =>   w > capacity
ROR_9:12:int_knapsack(int,int,int): w <= capacity  =>   w >= capacity
ROR_10:12:int_knapsack(int,int,int): w <= capacity  =>   w < capacity
ROR_11:12:int_knapsack(int,int,int): w <= capacity  =>   w == capacity
ROR_12:12:int_knapsack(int,int,int): w <= capacity  =>   w != capacity
ROR_13:12:int_knapsack(int,int,int): w <= capacity  =>   true
ROR_14:12:int_knapsack(int,int,int): w <= capacity  =>   false
ROR_15:13:int_knapsack(int,int,int): i == 0  =>   i > 0
ROR_16:13:int_knapsack(int,int,int): i == 0  =>   i >= 0
ROR_17:13:int_knapsack(int,int,int): i == 0  =>   i < 0
ROR_18:13:int_knapsack(int,int,int): i == 0  =>   i <= 0
ROR_19:13:int_knapsack(int,int,int): i == 0  =>   i != 0
ROR_20:13:int_knapsack(int,int,int): i == 0  =>   true
ROR_21:13:int_knapsack(int,int,int): i == 0  =>   false
ROR_22:13:int_knapsack(int,int,int): w == 0  =>   w > 0
ROR_23:13:int_knapsack(int,int,int): w == 0  =>   w >= 0
ROR_24:13:int_knapsack(int,int,int): w == 0  =>   w < 0
ROR_25:13:int_knapsack(int,int,int): w == 0  =>   w <= 0
ROR_26:13:int_knapsack(int,int,int): w == 0  =>   w != 0
ROR_27:13:int_knapsack(int,int,int): w == 0  =>   true
ROR_28:13:int_knapsack(int,int,int): w == 0  =>   false
ROR_29:16:int_knapsack(int,int,int): weights[i - 1] <= w  =>   weights[i - 1] > w
ROR_30:16:int_knapsack(int,int,int): weights[i - 1] <= w  =>   weights[i - 1] >= w
ROR_31:16:int_knapsack(int,int,int): weights[i - 1] <= w  =>   weights[i - 1] < w
ROR_32:16:int_knapsack(int,int,int): weights[i - 1] <= w  =>   weights[i - 1] == w
ROR_33:16:int_knapsack(int,int,int): weights[i - 1] <= w  =>   weights[i - 1] != w
ROR_34:16:int_knapsack(int,int,int): weights[i - 1] <= w  =>   true
ROR_35:16:int_knapsack(int,int,int): weights[i - 1] <= w  =>   false
COR_1:13:int_knapsack(int,int,int): i == 0 || w == 0  =>   i == 0 && w == 0
COR_2:13:int_knapsack(int,int,int): i == 0 || w == 0  =>   i == 0 ^ w == 0
COI_1:11:int_knapsack(int,int,int): i <= n  =>  !(i <= n)
COI_2:12:int_knapsack(int,int,int): w <= capacity  =>  !(w <= capacity)
COI_3:13:int_knapsack(int,int,int): i == 0  =>  !(i == 0)
COI_4:13:int_knapsack(int,int,int): w == 0  =>  !(w == 0)
COI_5:13:int_knapsack(int,int,int): i == 0 || w == 0  =>  !(i == 0 || w == 0)
COI_6:16:int_knapsack(int,int,int): weights[i - 1] <= w  =>  !(weights[i - 1] <= w)
LOI_1:9:int_knapsack(int,int,int):weights.length => ~weights.length
LOI_2:10:int_knapsack(int,int,int):n => ~n
LOI_3:10:int_knapsack(int,int,int):capacity => ~capacity
LOI_4:11:int_knapsack(int,int,int):i => ~i
LOI_5:11:int_knapsack(int,int,int):n => ~n
LOI_6:11:int_knapsack(int,int,int):i => ~i
LOI_7:12:int_knapsack(int,int,int):w => ~w
LOI_8:12:int_knapsack(int,int,int):capacity => ~capacity
LOI_9:12:int_knapsack(int,int,int):w => ~w
LOI_10:13:int_knapsack(int,int,int):i => ~i
LOI_11:13:int_knapsack(int,int,int):w => ~w
LOI_12:14:int_knapsack(int,int,int):i => ~i
LOI_13:14:int_knapsack(int,int,int):w => ~w
LOI_14:16:int_knapsack(int,int,int):i => ~i
LOI_15:16:int_knapsack(int,int,int):w => ~w
LOI_16:17:int_knapsack(int,int,int):i => ~i
LOI_17:17:int_knapsack(int,int,int):w => ~w
LOI_18:17:int_knapsack(int,int,int):i => ~i
LOI_19:17:int_knapsack(int,int,int):i => ~i
LOI_20:17:int_knapsack(int,int,int):w => ~w
LOI_21:17:int_knapsack(int,int,int):i => ~i
LOI_22:17:int_knapsack(int,int,int):i => ~i
LOI_23:17:int_knapsack(int,int,int):w => ~w
LOI_24:19:int_knapsack(int,int,int):i => ~i
LOI_25:19:int_knapsack(int,int,int):w => ~w
LOI_26:19:int_knapsack(int,int,int):i => ~i
LOI_27:19:int_knapsack(int,int,int):w => ~w
LOI_28:24:int_knapsack(int,int,int):n => ~n
LOI_29:24:int_knapsack(int,int,int):capacity => ~capacity
SDL_1:12:int_knapsack(int,int,int): int n = weights.length; int[][] dp = new int[n + 1][capacity + 1]; for (int i = 0; i <= n; i++) {     for (int w = 0; w <= capacity; w++) {         if (i == 0 || w == 0) {             dp[i][w] = 0;         } else {             if (weights[i - 1] <= w) {                 dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );             } else {                 dp[i][w] = dp[i - 1][w];             }         }     } } return dp[n][capacity];  =>   int n = weights.length; int[][] dp = new int[n + 1][capacity + 1]; return dp[n][capacity];
SDL_2:12:int_knapsack(int,int,int): for (int w = 0; w <= capacity; w++) {     if (i == 0 || w == 0) {         dp[i][w] = 0;     } else {         if (weights[i - 1] <= w) {             dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );         } else {             dp[i][w] = dp[i - 1][w];         }     } }  =>  
SDL_3:24:int_knapsack(int,int,int): for (int i = 0; i <= n; i++) {     for (int w = 0; w <= capacity; w++) {         if (i == 0 || w == 0) {             dp[i][w] = 0;         } else {             if (weights[i - 1] <= w) {                 dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );             } else {                 dp[i][w] = dp[i - 1][w];             }         }     } }  =>   for (int i = 0;; i++) {     for (int w = 0; w <= capacity; w++) {         if (i == 0 || w == 0) {             dp[i][w] = 0;         } else {             if (weights[i - 1] <= w) {                 dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );             } else {                 dp[i][w] = dp[i - 1][w];             }         }     } }
SDL_4:24:int_knapsack(int,int,int): for (int i = 0; i <= n; i++) {     for (int w = 0; w <= capacity; w++) {         if (i == 0 || w == 0) {             dp[i][w] = 0;         } else {             if (weights[i - 1] <= w) {                 dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );             } else {                 dp[i][w] = dp[i - 1][w];             }         }     } }  =>   for (int i = 0; i <= n;) {     for (int w = 0; w <= capacity; w++) {         if (i == 0 || w == 0) {             dp[i][w] = 0;         } else {             if (weights[i - 1] <= w) {                 dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );             } else {                 dp[i][w] = dp[i - 1][w];             }         }     } }
SDL_5:13:int_knapsack(int,int,int): if (i == 0 || w == 0) {     dp[i][w] = 0; } else {     if (weights[i - 1] <= w) {         dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );     } else {         dp[i][w] = dp[i - 1][w];     } }  =>  
SDL_6:23:int_knapsack(int,int,int): for (int w = 0; w <= capacity; w++) {     if (i == 0 || w == 0) {         dp[i][w] = 0;     } else {         if (weights[i - 1] <= w) {             dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );         } else {             dp[i][w] = dp[i - 1][w];         }     } }  =>   for (int w = 0;; w++) {     if (i == 0 || w == 0) {         dp[i][w] = 0;     } else {         if (weights[i - 1] <= w) {             dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );         } else {             dp[i][w] = dp[i - 1][w];         }     } }
SDL_7:23:int_knapsack(int,int,int): for (int w = 0; w <= capacity; w++) {     if (i == 0 || w == 0) {         dp[i][w] = 0;     } else {         if (weights[i - 1] <= w) {             dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );         } else {             dp[i][w] = dp[i - 1][w];         }     } }  =>   for (int w = 0; w <= capacity;) {     if (i == 0 || w == 0) {         dp[i][w] = 0;     } else {         if (weights[i - 1] <= w) {             dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );         } else {             dp[i][w] = dp[i - 1][w];         }     } }
SDL_8:14:int_knapsack(int,int,int): dp[i][w] = 0;  =>  
SDL_9:22:int_knapsack(int,int,int): if (i == 0 || w == 0) {     dp[i][w] = 0; } else {     if (weights[i - 1] <= w) {         dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );     } else {         dp[i][w] = dp[i - 1][w];     } }  =>   if (true) {     dp[i][w] = 0; } else {     if (weights[i - 1] <= w) {         dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );     } else {         dp[i][w] = dp[i - 1][w];     } }
SDL_10:16:int_knapsack(int,int,int): if (weights[i - 1] <= w) {     dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] ); } else {     dp[i][w] = dp[i - 1][w]; }  =>  
SDL_11:17:int_knapsack(int,int,int): dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] );  =>  
SDL_12:21:int_knapsack(int,int,int): if (weights[i - 1] <= w) {     dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] ); } else {     dp[i][w] = dp[i - 1][w]; }  =>   if (true) {     dp[i][w] = Math.max( values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w] ); } else {     dp[i][w] = dp[i - 1][w]; }
SDL_13:19:int_knapsack(int,int,int): dp[i][w] = dp[i - 1][w];  =>  
SDL_14:25:int_knapsack(int,int,int): return dp[n][capacity];  =>   return 0;
VDL_1:10:int_knapsack(int,int,int):n + 1 => 1
VDL_2:10:int_knapsack(int,int,int):capacity + 1 => 1
VDL_3:11:int_knapsack(int,int,int):i <= n => n
VDL_4:11:int_knapsack(int,int,int):i <= n => i
VDL_5:11:int_knapsack(int,int,int):i++ =>  
VDL_6:12:int_knapsack(int,int,int):w <= capacity => capacity
VDL_7:12:int_knapsack(int,int,int):w <= capacity => w
VDL_8:12:int_knapsack(int,int,int):w++ =>  
VDL_9:13:int_knapsack(int,int,int):i == 0 => 0
VDL_10:13:int_knapsack(int,int,int):w == 0 => 0
VDL_11:16:int_knapsack(int,int,int):i - 1 => 1
VDL_12:16:int_knapsack(int,int,int):weights[i - 1] <= w => w
VDL_13:16:int_knapsack(int,int,int):weights[i - 1] <= w => weights[i - 1]
VDL_14:17:int_knapsack(int,int,int):i - 1 => 1
VDL_15:17:int_knapsack(int,int,int):i - 1 => 1
VDL_16:17:int_knapsack(int,int,int):i - 1 => 1
VDL_17:17:int_knapsack(int,int,int):w - weights[i - 1] => weights[i - 1]
VDL_18:17:int_knapsack(int,int,int):w - weights[i - 1] => w
VDL_19:17:int_knapsack(int,int,int):values[i - 1] + dp[i - 1][w - weights[i - 1]] => dp[i - 1][w - weights[i - 1]]
VDL_20:17:int_knapsack(int,int,int):values[i - 1] + dp[i - 1][w - weights[i - 1]] => values[i - 1]
VDL_21:17:int_knapsack(int,int,int):i - 1 => 1
VDL_22:19:int_knapsack(int,int,int):i - 1 => 1
ODL_1:10:int_knapsack(int,int,int):n + 1 => n
ODL_2:10:int_knapsack(int,int,int):n + 1 => 1
ODL_3:10:int_knapsack(int,int,int):capacity + 1 => capacity
ODL_4:10:int_knapsack(int,int,int):capacity + 1 => 1
ODL_5:11:int_knapsack(int,int,int):i <= n => i
ODL_6:11:int_knapsack(int,int,int):i <= n => n
ODL_7:11:int_knapsack(int,int,int):i++ => i
ODL_8:12:int_knapsack(int,int,int):w <= capacity => w
ODL_9:12:int_knapsack(int,int,int):w <= capacity => capacity
ODL_10:12:int_knapsack(int,int,int):w++ => w
ODL_11:13:int_knapsack(int,int,int):i == 0 => i
ODL_12:13:int_knapsack(int,int,int):i == 0 => 0
ODL_13:13:int_knapsack(int,int,int):w == 0 => w
ODL_14:13:int_knapsack(int,int,int):w == 0 => 0
ODL_15:13:int_knapsack(int,int,int):i == 0 || w == 0 => i == 0
ODL_16:13:int_knapsack(int,int,int):i == 0 || w == 0 => w == 0
ODL_17:16:int_knapsack(int,int,int):i - 1 => i
ODL_18:16:int_knapsack(int,int,int):i - 1 => 1
ODL_19:16:int_knapsack(int,int,int):weights[i - 1] <= w => weights[i - 1]
ODL_20:16:int_knapsack(int,int,int):weights[i - 1] <= w => w
ODL_21:17:int_knapsack(int,int,int):i - 1 => i
ODL_22:17:int_knapsack(int,int,int):i - 1 => 1
ODL_23:17:int_knapsack(int,int,int):i - 1 => i
ODL_24:17:int_knapsack(int,int,int):i - 1 => 1
ODL_25:17:int_knapsack(int,int,int):i - 1 => i
ODL_26:17:int_knapsack(int,int,int):i - 1 => 1
ODL_27:17:int_knapsack(int,int,int):w - weights[i - 1] => w
ODL_28:17:int_knapsack(int,int,int):w - weights[i - 1] => weights[i - 1]
ODL_29:17:int_knapsack(int,int,int):values[i - 1] + dp[i - 1][w - weights[i - 1]] => values[i - 1]
ODL_30:17:int_knapsack(int,int,int):values[i - 1] + dp[i - 1][w - weights[i - 1]] => dp[i - 1][w - weights[i - 1]]
ODL_31:17:int_knapsack(int,int,int):i - 1 => i
ODL_32:17:int_knapsack(int,int,int):i - 1 => 1
ODL_33:19:int_knapsack(int,int,int):i - 1 => i
ODL_34:19:int_knapsack(int,int,int):i - 1 => 1
CDL_1:10:int_knapsack(int,int,int):n + 1 => n
CDL_2:10:int_knapsack(int,int,int):capacity + 1 => capacity
CDL_3:13:int_knapsack(int,int,int):i == 0 => i
CDL_4:13:int_knapsack(int,int,int):w == 0 => w
CDL_5:16:int_knapsack(int,int,int):i - 1 => i
CDL_6:17:int_knapsack(int,int,int):i - 1 => i
CDL_7:17:int_knapsack(int,int,int):i - 1 => i
CDL_8:17:int_knapsack(int,int,int):i - 1 => i
CDL_9:17:int_knapsack(int,int,int):i - 1 => i
CDL_10:19:int_knapsack(int,int,int):i - 1 => i
